
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async greet(name: string) : Promise<string> {
    return await TAURI_INVOKE("greet", { name });
},
async readText(pathStr: string) : Promise<Result<TextContent, ApiError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("read_text", { pathStr }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async readFolder(params: OptParams) : Promise<Result<Folder, ApiError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("read_folder", { params }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * set state
 * 
 * # arg
 * - key
 * - opt_val: if `None` then delete cache
 * 
 * # Examples
 * ```
 * ```
 */
async setState(key: string, val: string | null) : Promise<Result<string | null, ApiError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("set_state", { key, val }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * get state
 * 
 * # arg
 * - key
 * - default_val: If the key does not exist in the cache, insert the default value and return it.
 */
async getState(key: string, defaultVal: string | null) : Promise<Result<string | null, ApiError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_state", { key, defaultVal }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getHomeDir() : Promise<Result<Partial<{ [key in HomeType]: string }>, ApiError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_home_dir") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getDisks() : Promise<Result<DiskInfo[], ApiError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_disks") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getArgPath() : Promise<Result<string | null, ApiError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_arg_path") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type ApiError = { Io: string } | { Json: string } | { Folder: string } | { DirApi: string }
export type DiskInfo = { path: string }
export type Folder = { item: Item; path_param: string; base_nm: string; tot?: number | null; cnt?: number | null; skip_n?: number | null; take_n?: number | null; ordering?: OrdItem[] | null }
export type HomeType = "RootDir" | "HomeDir" | "DownloadDir" | "VideoDir" | "DocumentDir" | "DesktopDir" | "PictureDir" | "AudioDir" | "ConfigDir" | "DataDir" | "DataLocalDir" | "CacheDir" | "FontDir" | "PublicDir" | "ExecutableDir" | "RuntimeDir" | "TemplateDir"
export type Item = { nm: string; dir: boolean; ext?: string | null; mt?: string | null; sz?: number | null; tm?: number | null; items?: Item[] | null }
export type MetaType = "Sz" | "Tm" | "Mt" | "Ext"
export type OptParams = { path_str?: string | null; meta_types?: MetaType[] | null; ordering?: OrdItem[] | null; skip_n?: number | null; take_n?: number | null; is_pretty?: boolean | null; cache_nm?: string | null }
export type OrdItem = { nm: OrderBy; asc: OrderAsc }
export type OrderAsc = "Asc" | "Desc"
export type OrderBy = "Dir" | "Nm" | "Sz" | "Tm" | "Mt" | "Ext"
export type TextContent = { path: string; mimetype: string; enc?: string | null; text?: string | null }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
